// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: hash_with_32_bytes.capnp


pub mod hash {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
      Reader { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Reader<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Reader { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_byte0(self) -> u8 {
      self.reader.get_data_field::<u8>(0)
    }
    #[inline]
    pub fn get_byte1(self) -> u8 {
      self.reader.get_data_field::<u8>(1)
    }
    #[inline]
    pub fn get_byte2(self) -> u8 {
      self.reader.get_data_field::<u8>(2)
    }
    #[inline]
    pub fn get_byte3(self) -> u8 {
      self.reader.get_data_field::<u8>(3)
    }
    #[inline]
    pub fn get_byte4(self) -> u8 {
      self.reader.get_data_field::<u8>(4)
    }
    #[inline]
    pub fn get_byte5(self) -> u8 {
      self.reader.get_data_field::<u8>(5)
    }
    #[inline]
    pub fn get_byte6(self) -> u8 {
      self.reader.get_data_field::<u8>(6)
    }
    #[inline]
    pub fn get_byte7(self) -> u8 {
      self.reader.get_data_field::<u8>(7)
    }
    #[inline]
    pub fn get_byte8(self) -> u8 {
      self.reader.get_data_field::<u8>(8)
    }
    #[inline]
    pub fn get_byte9(self) -> u8 {
      self.reader.get_data_field::<u8>(9)
    }
    #[inline]
    pub fn get_byte10(self) -> u8 {
      self.reader.get_data_field::<u8>(10)
    }
    #[inline]
    pub fn get_byte11(self) -> u8 {
      self.reader.get_data_field::<u8>(11)
    }
    #[inline]
    pub fn get_byte12(self) -> u8 {
      self.reader.get_data_field::<u8>(12)
    }
    #[inline]
    pub fn get_byte13(self) -> u8 {
      self.reader.get_data_field::<u8>(13)
    }
    #[inline]
    pub fn get_byte14(self) -> u8 {
      self.reader.get_data_field::<u8>(14)
    }
    #[inline]
    pub fn get_byte15(self) -> u8 {
      self.reader.get_data_field::<u8>(15)
    }
    #[inline]
    pub fn get_byte16(self) -> u8 {
      self.reader.get_data_field::<u8>(16)
    }
    #[inline]
    pub fn get_byte17(self) -> u8 {
      self.reader.get_data_field::<u8>(17)
    }
    #[inline]
    pub fn get_byte18(self) -> u8 {
      self.reader.get_data_field::<u8>(18)
    }
    #[inline]
    pub fn get_byte19(self) -> u8 {
      self.reader.get_data_field::<u8>(19)
    }
    #[inline]
    pub fn get_byte20(self) -> u8 {
      self.reader.get_data_field::<u8>(20)
    }
    #[inline]
    pub fn get_byte21(self) -> u8 {
      self.reader.get_data_field::<u8>(21)
    }
    #[inline]
    pub fn get_byte22(self) -> u8 {
      self.reader.get_data_field::<u8>(22)
    }
    #[inline]
    pub fn get_byte23(self) -> u8 {
      self.reader.get_data_field::<u8>(23)
    }
    #[inline]
    pub fn get_byte24(self) -> u8 {
      self.reader.get_data_field::<u8>(24)
    }
    #[inline]
    pub fn get_byte25(self) -> u8 {
      self.reader.get_data_field::<u8>(25)
    }
    #[inline]
    pub fn get_byte26(self) -> u8 {
      self.reader.get_data_field::<u8>(26)
    }
    #[inline]
    pub fn get_byte27(self) -> u8 {
      self.reader.get_data_field::<u8>(27)
    }
    #[inline]
    pub fn get_byte28(self) -> u8 {
      self.reader.get_data_field::<u8>(28)
    }
    #[inline]
    pub fn get_byte29(self) -> u8 {
      self.reader.get_data_field::<u8>(29)
    }
    #[inline]
    pub fn get_byte30(self) -> u8 {
      self.reader.get_data_field::<u8>(30)
    }
    #[inline]
    pub fn get_byte31(self) -> u8 {
      self.reader.get_data_field::<u8>(31)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
      Builder { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Builder<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, default)?))
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { .. *self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn get_byte0(self) -> u8 {
      self.builder.get_data_field::<u8>(0)
    }
    #[inline]
    pub fn set_byte0(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(0, value);
    }
    #[inline]
    pub fn get_byte1(self) -> u8 {
      self.builder.get_data_field::<u8>(1)
    }
    #[inline]
    pub fn set_byte1(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(1, value);
    }
    #[inline]
    pub fn get_byte2(self) -> u8 {
      self.builder.get_data_field::<u8>(2)
    }
    #[inline]
    pub fn set_byte2(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(2, value);
    }
    #[inline]
    pub fn get_byte3(self) -> u8 {
      self.builder.get_data_field::<u8>(3)
    }
    #[inline]
    pub fn set_byte3(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(3, value);
    }
    #[inline]
    pub fn get_byte4(self) -> u8 {
      self.builder.get_data_field::<u8>(4)
    }
    #[inline]
    pub fn set_byte4(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(4, value);
    }
    #[inline]
    pub fn get_byte5(self) -> u8 {
      self.builder.get_data_field::<u8>(5)
    }
    #[inline]
    pub fn set_byte5(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(5, value);
    }
    #[inline]
    pub fn get_byte6(self) -> u8 {
      self.builder.get_data_field::<u8>(6)
    }
    #[inline]
    pub fn set_byte6(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(6, value);
    }
    #[inline]
    pub fn get_byte7(self) -> u8 {
      self.builder.get_data_field::<u8>(7)
    }
    #[inline]
    pub fn set_byte7(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(7, value);
    }
    #[inline]
    pub fn get_byte8(self) -> u8 {
      self.builder.get_data_field::<u8>(8)
    }
    #[inline]
    pub fn set_byte8(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(8, value);
    }
    #[inline]
    pub fn get_byte9(self) -> u8 {
      self.builder.get_data_field::<u8>(9)
    }
    #[inline]
    pub fn set_byte9(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(9, value);
    }
    #[inline]
    pub fn get_byte10(self) -> u8 {
      self.builder.get_data_field::<u8>(10)
    }
    #[inline]
    pub fn set_byte10(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(10, value);
    }
    #[inline]
    pub fn get_byte11(self) -> u8 {
      self.builder.get_data_field::<u8>(11)
    }
    #[inline]
    pub fn set_byte11(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(11, value);
    }
    #[inline]
    pub fn get_byte12(self) -> u8 {
      self.builder.get_data_field::<u8>(12)
    }
    #[inline]
    pub fn set_byte12(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(12, value);
    }
    #[inline]
    pub fn get_byte13(self) -> u8 {
      self.builder.get_data_field::<u8>(13)
    }
    #[inline]
    pub fn set_byte13(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(13, value);
    }
    #[inline]
    pub fn get_byte14(self) -> u8 {
      self.builder.get_data_field::<u8>(14)
    }
    #[inline]
    pub fn set_byte14(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(14, value);
    }
    #[inline]
    pub fn get_byte15(self) -> u8 {
      self.builder.get_data_field::<u8>(15)
    }
    #[inline]
    pub fn set_byte15(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(15, value);
    }
    #[inline]
    pub fn get_byte16(self) -> u8 {
      self.builder.get_data_field::<u8>(16)
    }
    #[inline]
    pub fn set_byte16(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(16, value);
    }
    #[inline]
    pub fn get_byte17(self) -> u8 {
      self.builder.get_data_field::<u8>(17)
    }
    #[inline]
    pub fn set_byte17(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(17, value);
    }
    #[inline]
    pub fn get_byte18(self) -> u8 {
      self.builder.get_data_field::<u8>(18)
    }
    #[inline]
    pub fn set_byte18(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(18, value);
    }
    #[inline]
    pub fn get_byte19(self) -> u8 {
      self.builder.get_data_field::<u8>(19)
    }
    #[inline]
    pub fn set_byte19(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(19, value);
    }
    #[inline]
    pub fn get_byte20(self) -> u8 {
      self.builder.get_data_field::<u8>(20)
    }
    #[inline]
    pub fn set_byte20(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(20, value);
    }
    #[inline]
    pub fn get_byte21(self) -> u8 {
      self.builder.get_data_field::<u8>(21)
    }
    #[inline]
    pub fn set_byte21(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(21, value);
    }
    #[inline]
    pub fn get_byte22(self) -> u8 {
      self.builder.get_data_field::<u8>(22)
    }
    #[inline]
    pub fn set_byte22(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(22, value);
    }
    #[inline]
    pub fn get_byte23(self) -> u8 {
      self.builder.get_data_field::<u8>(23)
    }
    #[inline]
    pub fn set_byte23(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(23, value);
    }
    #[inline]
    pub fn get_byte24(self) -> u8 {
      self.builder.get_data_field::<u8>(24)
    }
    #[inline]
    pub fn set_byte24(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(24, value);
    }
    #[inline]
    pub fn get_byte25(self) -> u8 {
      self.builder.get_data_field::<u8>(25)
    }
    #[inline]
    pub fn set_byte25(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(25, value);
    }
    #[inline]
    pub fn get_byte26(self) -> u8 {
      self.builder.get_data_field::<u8>(26)
    }
    #[inline]
    pub fn set_byte26(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(26, value);
    }
    #[inline]
    pub fn get_byte27(self) -> u8 {
      self.builder.get_data_field::<u8>(27)
    }
    #[inline]
    pub fn set_byte27(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(27, value);
    }
    #[inline]
    pub fn get_byte28(self) -> u8 {
      self.builder.get_data_field::<u8>(28)
    }
    #[inline]
    pub fn set_byte28(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(28, value);
    }
    #[inline]
    pub fn get_byte29(self) -> u8 {
      self.builder.get_data_field::<u8>(29)
    }
    #[inline]
    pub fn set_byte29(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(29, value);
    }
    #[inline]
    pub fn get_byte30(self) -> u8 {
      self.builder.get_data_field::<u8>(30)
    }
    #[inline]
    pub fn set_byte30(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(30, value);
    }
    #[inline]
    pub fn get_byte31(self) -> u8 {
      self.builder.get_data_field::<u8>(31)
    }
    #[inline]
    pub fn set_byte31(&mut self, value: u8)  {
      self.builder.set_data_field::<u8>(31, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 4, pointers: 0 };
    pub const TYPE_ID: u64 = 0xc7e7_4389_b282_c879;
  }
}
