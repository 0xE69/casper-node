// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: global_state.capnp


pub mod key {
  pub use self::Which::{Account,Hash,URef,Transfer,DeployInfo,EraInfo,Balance,Bid,Withdraw,Dictionary,SystemContractRegistry};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
      Reader { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Reader<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Reader { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    pub fn has_account(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_hash(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_u_ref(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 2 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_transfer(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 3 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_deploy_info(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_balance(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 6 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_bid(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 7 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_withdraw(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 8 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_dictionary(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 9 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(Account(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(Hash(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(URef(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(Transfer(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(DeployInfo(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(EraInfo(
            self.reader.get_data_field::<u64>(1)
          ))
        }
        6 => {
          ::core::result::Result::Ok(Balance(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        7 => {
          ::core::result::Result::Ok(Bid(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        8 => {
          ::core::result::Result::Ok(Withdraw(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        9 => {
          ::core::result::Result::Ok(Dictionary(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        10 => {
          ::core::result::Result::Ok(SystemContractRegistry(
            ()
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
      Builder { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Builder<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, default)?))
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { .. *self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn set_account(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_account(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_account(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 0 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_hash(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_hash(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_hash(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 1 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_u_ref(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 2);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_u_ref(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 2);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_u_ref(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 2 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_transfer(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 3);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_transfer(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 3);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_transfer(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 3 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_deploy_info(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_deploy_info(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_deploy_info(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 4 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_era_info(&mut self, value: u64)  {
      self.builder.set_data_field::<u16>(0, 5);
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn set_balance(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 6);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_balance(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 6);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_balance(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 6 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_bid(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 7);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_bid(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 7);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_bid(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 7 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_withdraw(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 8);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_withdraw(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 8);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_withdraw(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 8 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_dictionary(&mut self, value: crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'_>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 9);
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_dictionary(self, ) -> crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 9);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_dictionary(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 9 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_system_contract_registry(&mut self, _value: ())  {
      self.builder.set_data_field::<u16>(0, 10);
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(Account(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(Hash(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(URef(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(Transfer(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(DeployInfo(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(EraInfo(
            self.builder.get_data_field::<u64>(1)
          ))
        }
        6 => {
          ::core::result::Result::Ok(Balance(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        7 => {
          ::core::result::Result::Ok(Bid(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        8 => {
          ::core::result::Result::Ok(Withdraw(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        9 => {
          ::core::result::Result::Ok(Dictionary(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        10 => {
          ::core::result::Result::Ok(SystemContractRegistry(
            ()
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 2, pointers: 1 };
    pub const TYPE_ID: u64 = 0x9a0c_f3b9_9644_23f4;
  }
  pub enum Which<A0,A1,A2,A3,A4,A5,A6,A7,A8> {
    Account(A0),
    Hash(A1),
    URef(A2),
    Transfer(A3),
    DeployInfo(A4),
    EraInfo(u64),
    Balance(A5),
    Bid(A6),
    Withdraw(A7),
    Dictionary(A8),
    SystemContractRegistry(()),
  }
  pub type WhichReader<'a,> = Which<::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Reader<'a>>>;
  pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>,::capnp::Result<crate::capnp::hash_with_32_bytes_capnp::hash32::Builder<'a>>>;
}

pub mod global_state_entry {
  pub use self::Which::{Account,Contract,Uref,TransferAddr,DeployInfo,SystemContractRegistry};

  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
      Reader { reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Reader<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Reader { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    pub fn has_account(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 0 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_contract(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 1 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_uref(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 2 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_transfer_addr(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 3 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_deploy_info(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 4 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    pub fn has_system_contract_registry(&self) -> bool {
      if self.reader.get_data_field::<u16>(0) != 5 { return false; }
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
      match self.reader.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(Account(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(Contract(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(Uref(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(TransferAddr(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(DeployInfo(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(SystemContractRegistry(
            ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    #[inline]
    fn struct_size() -> ::capnp::private::layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
      Builder { builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Builder<'a,>> {
      ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, default)?))
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
    fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { .. *self }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      ::capnp::traits::FromStructReader::new(self.builder.into_reader())
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.into_reader().total_size()
    }
    #[inline]
    pub fn set_account(&mut self, value: crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::account_capnp::account::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 0);
      <crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::account_capnp::account::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_account(self, ) -> crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::account_capnp::account::Owned> {
      self.builder.set_data_field::<u16>(0, 0);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_account(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 0 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_contract(&mut self, value: crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 1);
      <crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_contract(self, ) -> crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned> {
      self.builder.set_data_field::<u16>(0, 1);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_contract(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 1 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_uref(&mut self, value: crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::uref_capnp::u_ref::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 2);
      <crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::uref_capnp::u_ref::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_uref(self, ) -> crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::uref_capnp::u_ref::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned> {
      self.builder.set_data_field::<u16>(0, 2);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_uref(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 2 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_transfer_addr(&mut self, value: crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::transfer_capnp::transfer::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 3);
      <crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::transfer_capnp::transfer::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_transfer_addr(self, ) -> crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::transfer_capnp::transfer::Owned> {
      self.builder.set_data_field::<u16>(0, 3);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_transfer_addr(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 3 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_deploy_info(&mut self, value: crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::deploy_info_capnp::deploy_info::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 4);
      <crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::deploy_info_capnp::deploy_info::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_deploy_info(self, ) -> crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::deploy_info_capnp::deploy_info::Owned> {
      self.builder.set_data_field::<u16>(0, 4);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_deploy_info(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 4 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn set_system_contract_registry(&mut self, value: crate::capnp::map_capnp::string_map::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>) -> ::capnp::Result<()> {
      self.builder.set_data_field::<u16>(0, 5);
      <crate::capnp::map_capnp::string_map::Reader<'_,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned> as ::capnp::traits::SetPointerBuilder>::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
    }
    #[inline]
    pub fn init_system_contract_registry(self, ) -> crate::capnp::map_capnp::string_map::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned> {
      self.builder.set_data_field::<u16>(0, 5);
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_system_contract_registry(&self) -> bool {
      if self.builder.get_data_field::<u16>(0) != 5 { return false; }
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn which(self) -> ::core::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
      match self.builder.get_data_field::<u16>(0) {
        0 => {
          ::core::result::Result::Ok(Account(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        1 => {
          ::core::result::Result::Ok(Contract(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        2 => {
          ::core::result::Result::Ok(Uref(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        3 => {
          ::core::result::Result::Ok(TransferAddr(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        4 => {
          ::core::result::Result::Ok(DeployInfo(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        5 => {
          ::core::result::Result::Ok(SystemContractRegistry(
            ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
          ))
        }
        x => ::core::result::Result::Err(::capnp::NotInSchema(x))
      }
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
    pub const TYPE_ID: u64 = 0xca53_08b3_74ac_b05b;
  }
  pub enum Which<A0,A1,A2,A3,A4,A5> {
    Account(A0),
    Contract(A1),
    Uref(A2),
    TransferAddr(A3),
    DeployInfo(A4),
    SystemContractRegistry(A5),
  }
  pub type WhichReader<'a,> = Which<::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::account_capnp::account::Owned>>,::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>>,::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'a,crate::capnp::uref_capnp::u_ref::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>>,::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::transfer_capnp::transfer::Owned>>,::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Reader<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::deploy_info_capnp::deploy_info::Owned>>,::capnp::Result<crate::capnp::map_capnp::string_map::Reader<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>>>;
  pub type WhichBuilder<'a,> = Which<::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::account_capnp::account::Owned>>,::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>>,::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::uref_capnp::u_ref::Owned,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>>,::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::transfer_capnp::transfer::Owned>>,::capnp::Result<crate::capnp::global_state_capnp::global_state_entry::entry::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned,crate::capnp::deploy_info_capnp::deploy_info::Owned>>,::capnp::Result<crate::capnp::map_capnp::string_map::Builder<'a,crate::capnp::hash_with_32_bytes_capnp::hash32::Owned>>>;

  pub mod entry { /* K,V */
    #[derive(Copy, Clone)]
    pub struct Owned<K,V> {
      _phantom: ::core::marker::PhantomData<(K,V)>
    }
    impl <'a, K,V> ::capnp::traits::Owned<'a> for Owned <K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  { type Reader = Reader<'a, K,V>; type Builder = Builder<'a, K,V>; }
    impl <'a, K,V> ::capnp::traits::OwnedStruct<'a> for Owned <K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  { type Reader = Reader<'a, K,V>; type Builder = Builder<'a, K,V>; }
    impl <K,V> ::capnp::traits::Pipelined for Owned<K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  { type Pipeline = Pipeline<K,V>; }

    #[derive(Clone, Copy)]
    pub struct Reader<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      reader: ::capnp::private::layout::StructReader<'a>,
      _phantom: ::core::marker::PhantomData<(K,V)>
    }

    impl <'a,K,V> ::capnp::traits::HasTypeId for Reader<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      #[inline]
      fn type_id() -> u64 { _private::TYPE_ID }
    }
    impl <'a,K,V> ::capnp::traits::FromStructReader<'a> for Reader<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,K,V> {
        Reader { reader, _phantom: ::core::marker::PhantomData, }
      }
    }

    impl <'a,K,V> ::capnp::traits::FromPointerReader<'a> for Reader<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Reader<'a,K,V>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl <'a,K,V> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,K,V> ::capnp::traits::Imbue<'a> for Reader<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,K,V> Reader<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      pub fn reborrow(&self) -> Reader<'_,K,V> {
        Reader { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<<K as ::capnp::traits::Owned<'a>>::Reader> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
      }
      pub fn has_key(&self) -> bool {
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<<V as ::capnp::traits::Owned<'a>>::Reader> {
        ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
      }
      pub fn has_value(&self) -> bool {
        !self.reader.get_pointer_field(1).is_null()
      }
    }

    pub struct Builder<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      builder: ::capnp::private::layout::StructBuilder<'a>,
      _phantom: ::core::marker::PhantomData<(K,V)>
    }
    impl <'a,K,V> ::capnp::traits::HasStructSize for Builder<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize { _private::STRUCT_SIZE }
    }
    impl <'a,K,V> ::capnp::traits::HasTypeId for Builder<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      #[inline]
      fn type_id() -> u64 { _private::TYPE_ID }
    }
    impl <'a,K,V> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, K,V> {
        Builder { builder, _phantom: ::core::marker::PhantomData, }
      }
    }

    impl <'a,K,V> ::capnp::traits::ImbueMut<'a> for Builder<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,K,V> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,K,V> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Builder<'a,K,V>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, default)?))
      }
    }

    impl <'a,K,V> ::capnp::traits::SetPointerBuilder for Reader<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,K,V>, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,K,V> Builder<'a,K,V> where K: for<'c> ::capnp::traits::Owned<'c>, V: for<'c> ::capnp::traits::Owned<'c>  {
      pub fn into_reader(self) -> Reader<'a,K,V> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_,K,V> {
        Builder { .. *self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,K,V> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_key(self) -> ::capnp::Result<<K as ::capnp::traits::Owned<'a>>::Builder> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
      }
      #[inline]
      pub fn initn_key(self, length: u32) -> <K as ::capnp::traits::Owned<'a>>::Builder {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).initn_as(length)
      }
      #[inline]
      pub fn set_key(&mut self, value: <K as ::capnp::traits::Owned<'_>>::Reader) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value, false)
      }
      #[inline]
      pub fn init_key(self, ) -> <K as ::capnp::traits::Owned<'a>>::Builder {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(0)).init_as()
      }
      pub fn has_key(&self) -> bool {
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn get_value(self) -> ::capnp::Result<<V as ::capnp::traits::Owned<'a>>::Builder> {
        ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
      }
      #[inline]
      pub fn initn_value(self, length: u32) -> <V as ::capnp::traits::Owned<'a>>::Builder {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).initn_as(length)
      }
      #[inline]
      pub fn set_value(&mut self, value: <V as ::capnp::traits::Owned<'_>>::Reader) -> ::capnp::Result<()> {
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value, false)
      }
      #[inline]
      pub fn init_value(self, ) -> <V as ::capnp::traits::Owned<'a>>::Builder {
        ::capnp::any_pointer::Builder::new(self.builder.get_pointer_field(1)).init_as()
      }
      pub fn has_value(&self) -> bool {
        !self.builder.get_pointer_field(1).is_null()
      }
    }

    pub struct Pipeline<K,V> {
      _typeless: ::capnp::any_pointer::Pipeline,
      _phantom: ::core::marker::PhantomData<(K,V)>
    }
    impl<K,V> ::capnp::capability::FromTypelessPipeline for Pipeline<K,V> {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline<K,V> {
        Pipeline { _typeless: typeless, _phantom: ::core::marker::PhantomData, }
      }
    }
    impl<K,V> Pipeline<K,V> where K: ::capnp::traits::Pipelined, <K as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline, V: ::capnp::traits::Pipelined, <V as ::capnp::traits::Pipelined>::Pipeline: ::capnp::capability::FromTypelessPipeline  {
      pub fn get_key(&self) -> <K as ::capnp::traits::Pipelined>::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
      }
      pub fn get_value(&self) -> <V as ::capnp::traits::Pipelined>::Pipeline {
        ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
      }
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 0, pointers: 2 };
      pub const TYPE_ID: u64 = 0xc7d4_5dde_598f_90d7;
    }
  }

  pub mod era_id {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
    impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      #[inline]
      fn type_id() -> u64 { _private::TYPE_ID }
    }
    impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
        Reader { reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Reader<'a,>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructReader::new(reader.get_struct(default)?))
      }
    }

    impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
      fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
        self.reader
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn reborrow(&self) -> Reader<'_,> {
        Reader { .. *self }
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      #[inline]
      pub fn get_era_id(self) -> u8 {
        self.reader.get_data_field::<u8>(0)
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      #[inline]
      fn struct_size() -> ::capnp::private::layout::StructSize { _private::STRUCT_SIZE }
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      #[inline]
      fn type_id() -> u64 { _private::TYPE_ID }
    }
    impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
        Builder { builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [capnp::Word]>) -> ::capnp::Result<Builder<'a,>> {
        ::core::result::Result::Ok(::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, default)?))
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder for Reader<'a,>  {
      fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn into_reader(self) -> Reader<'a,> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }
      pub fn reborrow(&mut self) -> Builder<'_,> {
        Builder { .. *self }
      }
      pub fn reborrow_as_reader(&self) -> Reader<'_,> {
        ::capnp::traits::FromStructReader::new(self.builder.into_reader())
      }

      pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
        self.builder.into_reader().total_size()
      }
      #[inline]
      pub fn get_era_id(self) -> u8 {
        self.builder.get_data_field::<u8>(0)
      }
      #[inline]
      pub fn set_era_id(&mut self, value: u8)  {
        self.builder.set_data_field::<u8>(0, value);
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 0 };
      pub const TYPE_ID: u64 = 0xa8e7_03a8_0403_50f0;
    }
  }
}
